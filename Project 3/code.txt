#include <stdio.h>
#include <stdlib.h>
#include "shell.h"

void process_instruction() {
    /* Fetch the instruction from memory */
    uint32_t instruction = mem_read_32(CURRENT_STATE.PC);

    /* Extract the opcode and other fields */
    uint32_t opcode = (instruction >> 26) & 0x3F;
    uint32_t v0 = CURRENT_STATE.REGS[2];
    uint32_t rs = (instruction >> 21) & 0x1F;
    uint32_t rt = (instruction >> 16) & 0x1F;
    int32_t imm = (int16_t)(instruction & 0xFFFF); // Sign-extend immediate value

    /* Increment the program counter */
    NEXT_STATE.PC += 4;

    /* Decode and execute the instruction */
    switch (opcode) {
         case 0x0: 
            if (instruction == 0x0000000C) { // Check if instruction is syscall
                if (v0 == 0x0A) { // Check if register $v0 has value 0x0A (decimal 10)
                    RUN_BIT = FALSE; // Stop simulation loop
                } else {
                    fprintf(stderr, "Unsupported SYSCALL instruction\n");
                    exit(1);
                }
            } else {
                // Handle other special instructions if needed
            }
            break;
        case 0x09: /* addiu */
            printf("addiu\n");
            NEXT_STATE.REGS[rt] = CURRENT_STATE.REGS[rs] + imm;
            break;
        case 0x23: /* lw */
            {
                uint32_t address = CURRENT_STATE.REGS[rs] + imm;
                if (address % 4 != 0) {
                    fprintf(stderr, "Error: Unaligned memory access\n");
                    exit(1);
                }
                uint32_t word = mem_read_32(address);
                NEXT_STATE.REGS[rt] = word;
            }
            break;
        case 0x2B: /* sw */
            {
                uint32_t address = CURRENT_STATE.REGS[rs] + imm;
                if (address % 4 != 0) {
                    fprintf(stderr, "Error: Unaligned memory access\n");
                    exit(1);
                }
                mem_write_32(address, CURRENT_STATE.REGS[rt]);
            }
            break;
        // Other cases...
        default:
            /* Unsupported instruction */
            fprintf(stderr, "Unsupported instruction\n");
            exit(1);
    }
}