#include <stdio.h>
#include <stdlib.h>
#include "shell.h"

void process_instruction() {
    /* Fetch the instruction from memory */
    uint32_t instruction = mem_read_32(CURRENT_STATE.PC);

    /* Extract the opcode and other fields */
    uint32_t opcode31_26 = (instruction >> 26) & 0x3F;
    uint32_t opcode20_16 = (instruction >> 16) & 0x1F;
    uint32_t opcode5_0 = instruction & 0x3F;
    uint32_t v0 = CURRENT_STATE.REGS[2];
    uint32_t rs = (instruction >> 21) & 0x1F; // Extract source register
    uint32_t rt = (instruction >> 16) & 0x1F; // Extract target register
    uint32_t rd = (instruction >> 11) & 0x1F; // Extract destination register
    uint32_t imm = instruction & 0xFFFF; // Extract immediate value
    uint32_t shamt = (instruction >> 6) & 0x1F; // Extract shift amount
    int32_t sign_extended_imm = (int16_t)imm; // Sign-extend immediate value

    /* Decode and execute the instruction */
    switch(opcode31_26) { // Opcode from 31 to 26 bits
        case 0x02: // J
        printf("J\n");
        break;
        case 0x03: // JAL
        printf("JAL\n");
        break;
        case 0x05: // BNE
        printf("BNE\n");
        break;
        case 0x06: // BLEZ
        printf("BLEZ\n");
        break;
        case 0x07: // BGTZ
        printf("BGTZ\n");
        break;
        case 0x08: // ADDI
            NEXT_STATE.REGS[rt] = CURRENT_STATE.REGS[rs] & imm;
            NEXT_STATE.PC += 4;
            printf("ADDI\n");
        break;
        case 0x09: // ADDIU
            if (imm & 0x8000) // if negative
                imm |= 0xFFFF0000;
            NEXT_STATE.REGS[rt] = CURRENT_STATE.REGS[rs] + imm;
            NEXT_STATE.PC += 4;
            printf("ADDIU\n");
        break;
        case 0x10: // BEQ
        printf("BEQ\n");
        break;
        case 0x0A: // SLTI
        printf("SLTI\n");
        break;
        case 0x0B: // SLTIU
        printf("SLTIU\n");
        break;
        case 0x0C: // ANDI
        printf("ANDI\n");
        break;
        case 0x0D: // ORI
        printf("ORI\n");
        break;
        case 0x0E: // XORI
             NEXT_STATE.REGS[rt] = CURRENT_STATE.REGS[rs] ^ sign_extended_imm;
             NEXT_STATE.PC += 4;
             printf("XORI\n");
        break;
        case 0x0F: // LUI
            NEXT_STATE.REGS[rt] = imm << 16;
            NEXT_STATE.PC += 4;
            printf("LUI\n");
        break;
        case 0x20: // LB
        printf("LB\n");
        break;
        case 0x21: // LH
        printf("LH\n");
        break;
        case 0x23: // LW
        printf("LW\n");
        break;
        case 0x24: // LBU
        printf("LBU\n");
        break;
        case 0x25: // LHU
        printf("LHU\n");
        break;
        case 0x28: // SB
        printf("SB\n");
        break;
        case 0x29: // SH
        printf("SH\n");
        break;
        case 0x2B: // SW
        printf("SW\n");
        break;
    }
    switch(opcode20_16) { // Opcode from 20 to 16 bits
        case 0x00: // BLTZ
        printf("BLTZ\n");
        break;
        case 0x01: // BGEZ
        printf("BGEZ\n");
        break;
        case 0x10: // BLTZAL
        printf("BLTZAL\n");
        break;
        case 0x11: // BGEZAL
        printf("BGEZAL\n");
        break;
    }
    switch(opcode5_0) { // Opcode from 5 to 0 bits
        case 0x00: // SLL
            NEXT_STATE.REGS[rd] = CURRENT_STATE.REGS[rt] << shamt;
            NEXT_STATE.PC += 4;
            printf("SLL\n");
        break;
        case 0x02: // SRL
            NEXT_STATE.REGS[rd] = CURRENT_STATE.REGS[rt] >> shamt;
            NEXT_STATE.PC += 4;
            printf("SRL\n");
        break;
        case 0x03: // SRA
            NEXT_STATE.REGS[rd] = (int32_t)CURRENT_STATE.REGS[rt] >> shamt;
            NEXT_STATE.PC += 4;
            printf("SRA\n");
        break;
        case 0x04: // SLLV
        printf("SLLV\n");
        break;
        case 0x06: // SRLV
        printf("SRLV\n");
        break;
        case 0x07: // SRAV
        printf("SRAV\n");
        break;
        case 0x08: // JR
        printf("JR\n");
        break;
        case 0x09: // JALR
        printf("JALR\n");
        break;
        case 0X10: // MFHI
        printf("MFHI\n");
        break;
        case 0x11: // MTHI
        printf("MTHI\n");
        break;
        case 0x12: // MFLO
        printf("MFLO\n");
        break;
        case 0x13: // MTLO
        printf("MTLO\n");
        break;
        case 0x18: // MULT
        printf("MULT\n");
        break;
        case 0x19: // MULTU
        printf("MULTU\n");
        break;
        case 0x20: // ADD
            NEXT_STATE.REGS[rd] = CURRENT_STATE.REGS[rs] + CURRENT_STATE.REGS[rt];
            NEXT_STATE.PC += 4;
            printf("ADD\n");
        break;
        case 0x21: // ADDU
            NEXT_STATE.REGS[rd] = CURRENT_STATE.REGS[rs] + CURRENT_STATE.REGS[rt];
            NEXT_STATE.PC += 4;
            printf("ADDU\n");
        break;
        case 0x22: // SUB
            NEXT_STATE.REGS[rd] = CURRENT_STATE.REGS[rs] - CURRENT_STATE.REGS[rt];
            NEXT_STATE.PC += 4;
            printf("SUB\n");
        break;
        case 0x23: // SUBU
            NEXT_STATE.REGS[rd] = CURRENT_STATE.REGS[rs] - CURRENT_STATE.REGS[rt];
            NEXT_STATE.PC += 4;
            printf("SUBU\n");
        break;
        case 0x24: // AND
            NEXT_STATE.REGS[rd] = CURRENT_STATE.REGS[rs] & CURRENT_STATE.REGS[rt];
            NEXT_STATE.PC += 4;
            printf("AND\n");
        break;
        case 0x25: // OR
            NEXT_STATE.REGS[rd] = CURRENT_STATE.REGS[rs] | CURRENT_STATE.REGS[rt];
            NEXT_STATE.PC += 4;
            printf("OR\n");
        break;
        case 0x26: // XOR
            NEXT_STATE.REGS[rd] = CURRENT_STATE.REGS[rs] ^ CURRENT_STATE.REGS[rt];
            NEXT_STATE.PC += 4;
            printf("XOR\n");
        break;
        case 0x27: // NOR
        printf("NOR\n");
        break;
        case 0x1A: // DIV
        printf("DIV\n");
        break;
        case 0x1B: // DIVU
        printf("DIVU\n");
        break;
        case 0x2A: // SLT
        printf("SLT\n");
        break;
        case 0x2B: // SLTU
        printf("SLTU\n");
        break;
        case 0x0C: //SYSCALL
        printf("SYSCALL\n");
            if (v0 == 0x0A) {  // Check if register $v0 has value 0x0A (decimal 10)
                NEXT_STATE.PC += 4;
                RUN_BIT = FALSE; // Stop simulation loop
        }
        break;
    }
}