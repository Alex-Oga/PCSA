#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/wait.h>
#include <netdb.h>
#include <thread>
#include <mutex>
#include <condition_variable>
#include <deque>
#include "pcsa_net.h"
#include <functional>
#include <atomic>
#include <netinet/in.h>
#include <netinet/tcp.h>

// while ((n = read_line(connfd, const_cast<char*>(buf), MAXLINE)) > 0) {

#define MAXLINE 8192
#define MAXBUF 8192

// Struct to hold HTTP request details
typedef struct {
    std::string method;
    std::string uri;
    std::string http_version;
    std::vector<std::pair<std::string, std::string>> headers;
    int content_length;
    std::string content_type;
    std::string path_info;
    std::string query_string;
    std::string body;
} HTTPRequest;

// Thread pool class
class ThreadPool {
public:
    ThreadPool(size_t numThreads) : stop(false) {
        for (size_t i = 0; i < numThreads; ++i) {
            threads.emplace_back([this] {
                while (true) {
                    std::function<void()> task;
                    {
                        std::unique_lock<std::mutex> lock(queue_mutex);
                        condition.wait(lock, [this] { return stop || !tasks.empty(); });
                        if (stop && tasks.empty())
                            return;
                        task = std::move(tasks.front());
                        tasks.pop_front();
                    }
                    task();
                }
            });
        }
    }

    template<class F>
    void enqueue(F&& f) {
        {
            std::unique_lock<std::mutex> lock(queue_mutex);
            tasks.emplace_back(std::forward<F>(f));
        }
        condition.notify_one();
    }

    ~ThreadPool() {
        {
            std::unique_lock<std::mutex> lock(queue_mutex);
            stop = true;
        }
        condition.notify_all();
        for (std::thread& worker : threads)
            worker.join();
    }

private:
    std::vector<std::thread> threads;
    std::deque<std::function<void()>> tasks;
    std::mutex queue_mutex;
    std::condition_variable condition;
    bool stop;
};

// Parse HTTP request
HTTPRequest parse_request(const std::string& request_str) {
    HTTPRequest request;
    std::istringstream iss(request_str);
    std::string line;

    // Parse request line
    std::getline(iss, line);
    std::istringstream iss_req(line);
    iss_req >> request.method >> request.uri >> request.http_version;

    // Parse headers
    while (std::getline(iss, line) && !line.empty()) {
        size_t pos = line.find(": ");
        if (pos != std::string::npos) {
            std::string header_name = line.substr(0, pos);
            std::string header_value = line.substr(pos + 2);
            request.headers.push_back(std::make_pair(header_name, header_value));
            if (header_name == "Content-Length") {
                request.content_length = std::stoi(header_value);
            } else if (header_name == "Content-Type") {
                request.content_type = header_value;
            }
        }
    }

    return request;
}

// Function to write all data to a file descriptor
void write_all(int fd, const void *buf, size_t count) {
    size_t bytes_written = 0;
    while (bytes_written < count) {
        ssize_t n = write(fd, static_cast<const char *>(buf) + bytes_written, count - bytes_written);
        if (n < 0) {
            std::cerr << "Error writing to socket." << std::endl;
            return;
        }
        bytes_written += n;
    }
}

// Function to read a line from a file descriptor
ssize_t read_line(int fd, void *buf, size_t maxlen) {
    char *buffer = static_cast<char*>(buf);
    char ch;
    ssize_t n, rc;

    for (n = 1; n < maxlen; n++) {
        if ((rc = read(fd, &ch, 1)) == 1) {
            *buffer++ = ch;
            if (ch == '\n') break;
        } else if (rc == 0) {
            if (n == 1) return 0; // No data read
            else break; // EOF, some data was read
        } else {
            if (errno == EINTR) continue; // Interrupted by signal
            return -1; // Error
        }
    }

    *buffer = '\0'; // Null-terminate the string
    return n;
}

// Function to get value of a header from HTTP request
std::string get_header_value(const std::vector<std::pair<std::string, std::string>>& headers, const std::string& header_name) {
    for (const auto& header : headers) {
        if (header.first == header_name) {
            return header.second;
        }
    }
    return "";
}

// Function to handle CGI requests
void handle_cgi_request(int connfd, const std::string& cgi_program, const HTTPRequest& request,
                        const char* client_hostname, const char* port) {
    // Fork a new process
    pid_t pid = fork();
    if (pid < 0) {
        // Fork failed
        std::cerr << "Failed to fork process for CGI handling." << std::endl;
        return;
    } else if (pid == 0) {
        // Child process: execute CGI program
        // Set up environment variables
        setenv("GATEWAY_INTERFACE", "CGI/1.1", 1);
        setenv("REQUEST_METHOD", request.method.c_str(), 1);
        setenv("REQUEST_URI", request.uri.c_str(), 1);
        setenv("CONTENT_LENGTH", std::to_string(request.content_length).c_str(), 1);
        setenv("CONTENT_TYPE", request.content_type.c_str(), 1);
        setenv("PATH_INFO", request.path_info.c_str(), 1);
        setenv("QUERY_STRING", request.query_string.c_str(), 1);
        setenv("REMOTE_ADDR", client_hostname, 1);
        setenv("SERVER_PORT", port, 1);
        setenv("SERVER_PROTOCOL", "HTTP/1.1", 1);
        setenv("SERVER_SOFTWARE", "YourServerName", 1);

        // Redirect stdin, stdout, and stderr of the CGI process
        dup2(connfd, STDIN_FILENO);
        dup2(connfd, STDOUT_FILENO);
        dup2(connfd, STDERR_FILENO);

        // Execute the CGI program
        execl(cgi_program.c_str(), cgi_program.c_str(), nullptr);

        // If execl fails, print error and exit child process
        std::cerr << "Failed to execute CGI program." << std::endl;
        exit(EXIT_FAILURE);
    } else {
        // Parent process: wait for child to finish
        int status;
        waitpid(pid, &status, 0);
        if (WIFEXITED(status) && WEXITSTATUS(status) == EXIT_SUCCESS) {
            // CGI program executed successfully
            std::cout << "CGI program executed successfully." << std::endl;
        } else {
            // CGI program execution failed
            std::cerr << "CGI program execution failed." << std::endl;
            // Send 500 Internal Server Error response to the client
            std::ostringstream response;
            response << "HTTP/1.1 500 Internal Server Error\r\n"
                     << "Content-Length: 0\r\n"
                     << "\r\n";
            write_all(connfd, response.str().c_str(), response.str().size());
        }
        // Close client socket in parent process
        close(connfd);
    }
}

// Main server function
void run_server(const std::string& port, const std::string& root_folder, size_t numThreads, const std::string& cgi_program, int timeout) {
    ThreadPool pool(numThreads);

    int listenfd, connfd;
    socklen_t clientlen;
    struct sockaddr_storage clientaddr;
    char client_hostname[MAXLINE], client_port[MAXLINE];
    char buf[MAXLINE];
    
    listenfd = open_listenfd(const_cast<char*>(port.c_str()));
    if (listenfd < 0) {
        std::cerr << "Failed to open listen socket." << std::endl;
        return;
    }

    std::cout << "Server listening on port " << port << std::endl;

    while (true) {
        clientlen = sizeof(clientaddr);
        connfd = accept(listenfd, (struct sockaddr*)&clientaddr, &clientlen);
        if (connfd < 0) {
            std::cerr << "Failed to accept connection." << std::endl;
            continue;
        }

        getnameinfo((struct sockaddr*)&clientaddr, clientlen, client_hostname, MAXLINE, client_port, MAXLINE, 0);
        std::cout << "Accepted connection from " << client_hostname << ":" << client_port << std::endl;

        // Set socket timeout
        struct timeval tv;
        tv.tv_sec = timeout;
        tv.tv_usec = 0;
        setsockopt(connfd, SOL_SOCKET, SO_RCVTIMEO, (const char*)&tv, sizeof tv);

        pool.enqueue([=] {
            ssize_t n;
            std::string request_str;
            bool keep_alive = true;  // Flag to determine if the connection should be kept alive
            
            while (keep_alive) {
                // Read the request
                request_str.clear();
                while ((n = read_line(connfd, const_cast<char*>(buf), MAXLINE)) > 0) {
                    request_str.append(buf, n);
                    if (request_str.find("\r\n\r\n") != std::string::npos) break; // End of request

                    // Check if the request is for closing the connection
                    if (request_str.find("Connection: close") != std::string::npos) {
                        keep_alive = false;
                    }
                }

                HTTPRequest request = parse_request(request_str);

                if (request.uri.find("/cgi/") == 0) {
                    // Handle CGI request
                    handle_cgi_request(connfd, cgi_program, request, client_hostname, port.c_str());
                } else {
                    // Handle regular request (not CGI)
                    // Implement your regular request handling logic here
                }

                if (!keep_alive || n <= 0) {
                    // Terminate the loop if the connection is not persistent or if no more data is available
                    break;
                }
            }

            close(connfd);
            std::cout << "Closed connection for client " << client_hostname << ":" << client_port << std::endl;
        });
    }
}

int main(int argc, char* argv[]) {
    std::string port, root_folder, cgi_program;
    size_t numThreads = 0;
    int timeout = 0;

    for (int i = 1; i < argc; i += 2) {
        std::string arg = argv[i];
        if (arg == "--port") {
            port = argv[i + 1];
        } else if (arg == "--root") {
            root_folder = argv[i + 1];
        } else if (arg == "--numThreads") {
            numThreads = std::stoi(argv[i + 1]);
        } else if (arg == "--timeout") {
            timeout = std::stoi(argv[i + 1]);
        } else if (arg == "--cgiHandler") {
            cgi_program = argv[i + 1];
        } else {
            std::cerr << "Unknown argument: " << arg << std::endl;
            return 1;
        }
    }

    if (port.empty() || root_folder.empty() || numThreads == 0 || timeout == 0 || cgi_program.empty()) {
        std::cerr << "Usage: " << argv[0] << " --port <listenPort> --root <wwwRoot> --numThreads <numThreads> --timeout <timeout> --cgiHandler <cgiProgram>" << std::endl;
        return 1;
    }

    run_server(port, root_folder, numThreads, cgi_program, timeout);

    return 0;
}
